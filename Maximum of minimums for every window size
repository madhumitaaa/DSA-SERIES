https://takeuforward.org/plus/dsa/problems/maximum-of-minimums-for-every-window-size

class Solution {
public:
    vector<int> maxOfMin(vector<int>& arr) {
        // Your code goes here
        int n=arr.size();
        vector<int>res(n,0);
        vector<int>left(n),right(n);
        stack<int>s;
        //filling previous smaller elemebt
        for(int i=0;i<n;i++)
        {
            while(!s.empty() && arr[s.top()]>=arr[i]){
                s.pop();
            }
            left[i]=s.empty()?-1:s.top();
            s.push(i);
        }
        while(!empty())s.pop();
         //filling next smaller elemebt
        for(int i=n-1;i>=0;i--)
        {
            while(!s.empty() && arr[s.top()]>=arr[i]){
                s.pop();
            }
            right[i]=s.empty()?n:s.top();
            s.push(i);
        }
//calculate window size
    for(int i=0;i<n;i++)
    {
        int len=right[i]-left[i]-1;
        res[len-1]=max(res[len-1],arr[i]);
    }
//fill remaining entries
    for(int i=n-2;i>=0;i--)
    {
        res[i]=max(res[i],res[i+1]);
    }



return res;





    }
};
