https://takeuforward.org/plus/dsa/problems/maximum-sum-combination


class Solution {
public:
  vector<int> maxSumCombinations(vector<int> &nums1, vector<int> &nums2, int k) {

int n=nums1.size();
sort(nums1.begin(),nums1.end(),greater<int>());
sort(nums2.begin(),nums2.end(),greater<int>());

priority_queue<pair<int,pair<int,int>>>maxHeap;

set<pair<int,int>>visited;

maxHeap.push({nums1[0]+nums2[0],{0,0}});
visited.insert({0,0});
vector<int>result;
while(k-- && !maxHeap.empty()){
  auto top=maxHeap.top();
  maxHeap.pop();
  int sum=top.first;
  int i=top.second.first;
  int j=top.second.second;
  result.push_back(sum);


if(i+1<n && visited.find({i+1,j})==visited.end()){
  maxHeap.push({nums1[i+1]+nums2[j],{i+1,j}});
  visited.insert({i+1,j});
}
if(j+1<n && visited.find({i,j+1})==visited.end()){
  maxHeap.push({nums1[i]+nums2[j+1],{i,j+1}});
  visited.insert({i,j+1});
}
}

return result;

  }
};
