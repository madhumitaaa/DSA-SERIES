https://leetcode.com/problems/cheapest-flights-within-k-stops/submissions/1803314047/

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>>adj(n);
        for(auto &edges:flights)
        {
            int u=edges[0],v=edges[1],w=edges[2];
            adj[u].push_back({v,w});
        }
        vector<int>dist(n,INT_MAX);
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        dist[src]=0;
        while(!q.empty())
        {
            auto [stops,info]=q.front();
            q.pop();
            int node=info.first;
            int cost=info.second;
            if(stops>k)continue;
            for(auto &edge:adj[node])
            {
                int next=edge.first;
                int price=edge.second;
                if(cost+price<dist[next]&&stops<=k)
                {
                    dist[next]=cost+price;
                    q.push({stops+1,{next,cost+price}});
                }
            }
        }
        return dist[dst]==INT_MAX?-1:dist[dst];
    }
};
