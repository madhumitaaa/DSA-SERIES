https://leetcode.com/problems/word-search/submissions/1810598402/

class Solution {
public:
    bool dfs(vector<vector<char>>& board, string& word, int i, int j, int k,
             vector<vector<int>>& visited) {
        int row = board.size();
        int col = board[0].size();
        if (k == word.length())
            return true;

        if (i < 0 || j < 0 || i >= row || j >= col || visited[i][j] ||
            board[i][j] != word[k])
            return false;
        visited[i][j] = 1;
        bool found = dfs(board, word, i + 1, j, k + 1, visited) ||
                     dfs(board, word, i - 1, j, k + 1, visited) ||
                     dfs(board, word, i, j - 1, k + 1, visited) ||
                     dfs(board, word, i, j + 1, k + 1, visited);

        visited[i][j] = 0;
        return found;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int row = board.size();
        int col = board[0].size();
        vector<vector<int>> visited(row, vector<int>(col, 0));
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (dfs(board, word, i, j, 0, visited))
                    return true;
            }
        }
        return false;
    }
};
