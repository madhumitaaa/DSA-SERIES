https://leetcode.com/problems/rotate-list/submissions/1622359123/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:


ListNode* findnthnode(ListNode*temp,int k)
{
    int cnt=1;
    while(temp!=NULL)
    {
        if(cnt==k)return temp;
        cnt++;
        temp=temp->next;
    }
    return temp;
}
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL||k==NULL)
        {
            return head;
        }
        ListNode* tail=head;
        int len=1;
    while(tail->next!=NULL)
    {
        tail=tail->next;
        len+=1;//find the length of the linked list
    }

        if(k%len==0)return head;
        k=k%len;
        tail->next=head;//tail ko head se jodo
        ListNode* newlast=findnthnode(head,len-k);//finding the new last node
        head=newlast->next;
        newlast->next=NULL;
         
          return head;
    }

};
