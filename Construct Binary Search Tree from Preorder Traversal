https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int idx=0;
        return buildBST(preorder,idx,INT_MIN,INT_MAX);
          }


private:
TreeNode* buildBST(vector<int>& preorder,int &idx,int lower,int upper){
    if(idx>=preorder.size())return NULL;
    int val=preorder[idx];
    if(val<lower||val>upper)return NULL;
    TreeNode* root=new TreeNode(val);
    idx++;
    root->left=buildBST(preorder,idx,lower,val);
    root->right=buildBST(preorder,idx,val,upper);

    return root;
    
}


};
