https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/submissions/1793751274/

class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> freq;
        long long sum = 0 ,maxsum = 0 ;
        int i = 0;
        for (int j = 0; j < nums.size(); j++) {
            sum += nums[j];
            freq[nums[j]]++;

            if (j - i + 1 > k) {
                freq[nums[i]]--;
                if (freq[nums[i]] == 0)freq.erase(nums[i]);
                     sum -= nums[i];
                     i++;
            }
            if (j - i + 1 == k && freq.size() == k) {
                maxsum = max(maxsum, sum);
            }
        }
         return maxsum;
    }
       
};
