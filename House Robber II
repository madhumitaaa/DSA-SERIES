https://leetcode.com/problems/house-robber-ii/submissions/1750734111/


class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1)return nums[0];
        int case1=roblinear(nums,0,n-2);
        int case2=roblinear(nums,1,n-1);
        return max(case1,case2);
      }

      int roblinear(vector<int>& nums,int l,int r)
      {
        int prev1=0,prev2=0;//for space optimization since we need only two states i-1  nd i-2
        for(int i=l;i<=r;i++)
        {
            int pick=nums[i]+prev2;
            int notpick=prev1;
            int curr=max(pick,notpick);
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
      }
};
