https://leetcode.com/problems/design-circular-queue/


class MyCircularQueue {
private:
  int front,rear;
  int size,capacity;
  int *arr;

public:
    MyCircularQueue(int k) {
      capacity=k;
        arr=new int[k];
        front =0;
        size=0;

        
    }
    
    ~MyCircularQueue() {
        delete[] arr;
    }

 
    bool isFull() {
       return(size==capacity);
    }
    
    bool enQueue(int value) {
       if(isFull())
        {
            return false;

        }
       int idx=(front+size) % capacity;
       arr[idx]=value;
       size++;
       return true;
        
    }
    
    bool deQueue() {
      if(isEmpty())return false;
      front=(front+1)%capacity;
      size--;
      return true;
    }
    
    int Front() {
        return isEmpty()?-1:arr[front];
    }
    
    int Rear() {
    return isEmpty()?-1:arr[(front+size-1)%capacity];
    }
    
    bool isEmpty() {
        return(size==0);
    }
   
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
