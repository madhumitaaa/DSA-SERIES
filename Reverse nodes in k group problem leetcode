https://leetcode.com/problems/reverse-nodes-in-k-group/submissions/1622278048/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
     
   ListNode* findkth(ListNode* temp,int k)
   {
      k-=1;
    while(temp!=NULL && k>0)
    {
        k--;
        temp=temp->next;
    }
    return temp;
   }
     ListNode* reversell(ListNode* head)
   {
      ListNode*curr=head;
      ListNode*next;
      ListNode*prev=NULL;
      while(curr!=NULL)
      {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
      }
      return prev;
   }

    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp=head;
        ListNode* prevnode=NULL;
        while(temp!=NULL)
        {
            ListNode* kthnode=findkth(temp,k);//finding the kth node
            if(kthnode==NULL)
            {
                if(prevnode)prevnode->next=temp;//basically the end case 
                        break;
            }
        ListNode* nextnode= kthnode->next;
        kthnode->next=NULL;
        reversell(temp);
        if(temp==head)
        {
            head=kthnode;
        }
         else
         {
            prevnode->next=kthnode;

         }
         prevnode=temp;
         temp=nextnode;
        }
         return head;
    }


};
