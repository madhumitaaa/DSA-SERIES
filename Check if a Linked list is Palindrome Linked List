https://leetcode.com/problems/palindrome-linked-list/description/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

ListNode * reverse(ListNode* head)
{
    if(head==NULL||head->next==NULL)return head;
    ListNode*newhead=reverse(head->next);
    ListNode*front=head->next;
    front->next=head;
    head->next=NULL;
    return newhead;

}

    bool isPalindrome(ListNode* head)
    {
     if(head==NULL||head->next==NULL)return true;
     ListNode*slow=head;
     ListNode*fast=head;
        while(fast->next!=NULL&&fast->next->next!=NULL)
     {
        slow=slow->next;
        fast=fast->next->next;
     }

ListNode*newhead=reverse(slow->next);
ListNode*first=head;
ListNode*second=newhead;
while(second!=NULL)
{
    if(first->val!=second->val)
    {
            reverse(newhead);
            return false;
    }
    first=first->next;
    second=second->next;
}

  reverse(newhead);
  return true;      
    }
}; 


//the question is solved by taking two pointers slow and fast slow jumps once in one iteration while fast jumps twice in one iteration,by the time we reach slow we reverse the remaining list then again take two pointers 
//first and second iterate towrds the two list if we get different element answer is false otherwise its true.
