https://leetcode.com/problems/maximum-width-of-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)return 0;
        long long maxwidth=0;
        queue<pair<TreeNode*,long long>>q;
        q.push({root,0});
        while(!q.empty()){
            int size=q.size();
            long long minindex=q.front().second;
            long long first,last;
            for(int i=0;i<size;i++)
            {
                auto [node,index]=q.front();
                q.pop();
                long long currind=index-minindex;
                if(i==0)first=currind;
                if(i==size-1)last=currind; 
                if(node->left)q.push({node->left,2*currind+1});
                  if(node->right)q.push({node->right,2*currind+2});
                 
            }
 maxwidth=max(maxwidth,last-first+1);

   }
   return (int)maxwidth;

    }
};
