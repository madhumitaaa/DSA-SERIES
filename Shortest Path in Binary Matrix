https://leetcode.com/problems/shortest-path-in-binary-matrix/submissions/1803603174/

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        if(grid[0][0]==1||grid[n-1][n-1]==1)
        {
            return -1;
        }
        if(n==1)return 1;
        vector<pair<int,int>>directions={
            {1,0},{-1,0},{0,1},{0,-1},
            {1,1},{1,-1},{-1,1},{-1,-1}
        };
         queue<pair<int,pair<int,int>>>q;
         q.push({1,{0,0}});
         grid[0][0]=1;
         while(!q.empty())
         {
            auto front=q.front();
            q.pop();
            int dist=front.first;
            int r=front.second.first;
            int c=front.second.second;
            if(r==n-1 && c==n-1)return dist;
         for(auto [dr,dc]:directions)
         {
            int nr=r+dr;
            int nc=c+dc;
            if(nr>=0 && nc>=0 && nr<n && nc<n && grid[nr][nc]==0)
            {
                    grid[nr][nc]=1;
                    q.push({dist+1,{nr,nc}});
            }
         }
         }
         return -1;
    }
};
